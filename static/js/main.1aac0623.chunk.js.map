{"version":3,"sources":["components/Navbar/Navbar.js","components/Header/Header.js","components/Container.js","components/Row.js","components/Card/Card.js","components/Game/Game.js","App.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","style","color","messageColor","message","score","highscore","Header","Container","children","Row","Card","state","clicked","handleClick","_this","handleLoseCondition","resetCardState","cardArr","handleCorrectGuess","setState","shuffleCards","cardArray","forEach","id","concat","this","backgroundImage","image","onClick","Component","Game","gameCards","tempCardArrangement","tempCardValue","randomCard","currentIndex","length","Math","floor","random","handleWinCondition","highscoreCheck","console","log","_this2","components_Navbar_Navbar","components_Header_Header","components_Container","components_Row","map","card","components_Card_Card","key","App","components_Game_Game","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.1aac0623.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Navbar.css\";\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark text-white fixed-top\">\r\n            <div className=\"col-0 col-sm-0 col-md-1 col-lg-1 col-xl-1\"></div>\r\n            <div className=\"col-3 col-sm-3\">\r\n                <h1>Clicky Game</h1>\r\n            </div>\r\n            <div className=\"col-4 col-sm-3\">\r\n                {/* Message and its color to display depending on the user's guess, coming in as props*/}\r\n                <h2 style={{ color: props.messageColor }}>{props.message}</h2>\r\n            </div>\r\n            <div className=\"col-4 col-sm-5\">\r\n                {/* Score and highscore values to display, brought in as props */}\r\n                <h3 className=\"score-display\" >Score:{props.score} | Highscore: <span className={(props.highscore > 0 ? \"highscore-display\" : \"\")}>{props.highscore}</span></h3>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport \"./Header.css\";\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"clicky-game-header\">\r\n            <h2>Clicky Game!</h2>\r\n            <p>Click on an image to earn points, but don't click on any more than once!</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nfunction Container(props) {\r\n    return <div className=\"container\">{props.children}</div>\r\n}\r\n\r\nexport default Container;","import React from \"react\";\r\n\r\nfunction Row(props) {\r\n    return <div className=\"row\">{props.children}</div>\r\n}\r\n\r\nexport default Row;","import React, { Component } from 'react';\r\nimport \"./Card.css\";\r\n//var images = require(\"../../images/placeholder-pic.png\");\r\n\r\nclass Card extends Component {\r\n    // Set the clicked state of the card to false initially\r\n    state = {\r\n        clicked: false\r\n    }\r\n\r\n    // Method that handles the click event for a card\r\n    handleClick = () => {\r\n        // If the card has already been clicked, run the method that handles when the user loses and reset every card's click state back to false.\r\n        if (this.state.clicked) {\r\n            this.props.handleLoseCondition();\r\n            this.resetCardState(this.props.cardArr);\r\n        }\r\n        else {\r\n            // If the card hasn't been clicked already, run the method that handles when the user guesses correctly and set the card's clicked state to true.\r\n            this.props.handleCorrectGuess();\r\n            this.setState({ clicked: true });\r\n        }\r\n        // Run the method that will shuffle the display order of the cards.\r\n        this.props.shuffleCards();\r\n    }\r\n\r\n    // Method for resetting the the clicked state of every card back to false.\r\n    resetCardState = (cardArray) => {\r\n        cardArray.forEach(() => this.setState({ clicked: false }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"col-4 col-sm-3 col-md-3 col-lg-3 col-xl-3\">\r\n                <div className=\"card\" id={`card-${this.props.id}`} style={{ backgroundImage: `url(${this.props.image})`}} onClick={this.handleClick}>\r\n                </div >\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport Navbar from \"../Navbar/Navbar\";\r\nimport Header from \"../Header/Header\";\r\nimport Container from \"../Container\";\r\nimport Row from \"../Row\";\r\nimport Card from \"../Card/Card\";\r\nimport gameCards from \"../../cards.json\";\r\n\r\nclass Game extends Component {\r\n    // Setting the state of the message and its color, the original array of cards being imported from cards.json, and the score and highscore.\r\n    // Also setting the state for the random order of which the cards will render.\r\n    state = {\r\n        gameCards: gameCards,\r\n        tempCardArrangement: [],\r\n        message: \"Click an image to begin!\",\r\n        messageColor: \"#FFFFFF\",\r\n        score: 0,\r\n        highscore: 0\r\n    }\r\n\r\n    // Shuffle the order of the counts on initial load.\r\n    componentDidMount() {\r\n        this.shuffleCards();\r\n        console.log(gameCards);\r\n    }\r\n\r\n    // Every update (in this case, clicking a card), run the method that determines whether or not to update the highscore.\r\n    componentDidUpdate() {\r\n        this.highscoreCheck();\r\n        this.handleWinCondition();\r\n    }\r\n\r\n    // Method that shuffles the order in which the cards will render.\r\n    // I used the Fisher-Yates Shuffle Algorithm.\r\n    shuffleCards = () => {\r\n\r\n        // setting a variable of cardArr equal to the original source of cards in the state.\r\n        let cardArr = this.state.gameCards;\r\n\r\n        // Take the current index starting at then end of the array.\r\n        // Declare 2 variables, one that temporarily holds the value of the current index.\r\n        // And one that represents a random card index that isn't the one being stored.\r\n        let currentIndex = cardArr.length; // (Left the current index number greater than the index position can go by 1 so I don't have to add it to Math.random later)\r\n        let tempCardValue;\r\n        let randomCard;\r\n\r\n        // As long as the current index number is greater than 0.\r\n        while (currentIndex > 0) {\r\n\r\n            // Randomly pick an index number from the card array.\r\n            randomCard = Math.floor(Math.random() * currentIndex);\r\n\r\n            // Decrement the current index number by 1.\r\n            currentIndex -= 1;\r\n\r\n            // Store current card in the temp variable.\r\n            tempCardValue = cardArr[currentIndex];\r\n\r\n            // Swap the current card with the randomly chosen card.\r\n            cardArr[currentIndex] = cardArr[randomCard];\r\n\r\n            // Set the card that was randomly chosen equal to the card we stored earlier. (switch places).\r\n            cardArr[randomCard] = tempCardValue;\r\n        }\r\n        // Setting the state for the randomized array of cards.\r\n        this.setState({ tempCardArrangement: cardArr });\r\n    }\r\n\r\n    // Method for handling when the user loses by clicking an image they already clicked.\r\n    handleLoseCondition = () => {\r\n        // Resetting the score back to 0 and displaying the message (in red) alerting them they lost.\r\n        this.setState({\r\n            score: 0,\r\n            message: \"You Guessed Incorrectly!\",\r\n            messageColor: \"#FF0000\"\r\n        });\r\n    }\r\n\r\n    // Method that handles when the user guesses correctly.\r\n    handleCorrectGuess = () => {\r\n        // Incrementing the score by 1 and displaying a message (in green) to the user telling them they have guessed correctly.\r\n        this.setState({\r\n            score: this.state.score + 1,\r\n            message: \"You Guessed Correctly!\",\r\n            messageColor: \"#32CD32\"\r\n        });\r\n    }\r\n\r\n    handleWinCondition = () => this.state.score === 12 ? this.setState({ message: \"You Win! Click an image to play again!\",  messageColor: \"#FFFFFF\", score: 0 }) : \"\";\r\n\r\n    // Method that checks if the user's end score was higher than the current highscore and updates the state accordingly.\r\n    highscoreCheck = () => this.state.score > this.state.highscore ? this.setState({ highscore: this.state.score }) : false\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Navbar message={this.state.message} messageColor={this.state.messageColor} score={this.state.score} highscore={this.state.highscore} />\r\n                <Header />\r\n                <Container>\r\n                    <Row>\r\n                        {/* Passing the card images, card array, and all the necessary methods */}\r\n                        {this.state.tempCardArrangement.map((card) =>\r\n                            <Card key={card.id} id={card.id} image={card.image} cardArr={this.state.gameCards}\r\n                                shuffleCards={this.shuffleCards} handleLoseCondition={this.handleLoseCondition}\r\n                                handleCorrectGuess={this.handleCorrectGuess} />)}\r\n                    </Row>\r\n                </Container>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport Game from \"./components/Game/Game\";\n\nfunction App() {\n    return <Game />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}